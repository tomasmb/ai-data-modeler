datasource db {
  provider = "postgresql"
  // Wasp requires that the url is set to the DATABASE_URL environment variable.
  url      = env("DATABASE_URL")
}

// Wasp requires the `prisma-client-js` generator to be present.
generator client {
  provider = "prisma-client-js"
}

model User {
    id         Int         @id @default(autoincrement())
    dataModels DataModel[]
}

model DataModel {
    id          Int           @id @default(autoincrement())
    name        String
    version     String
    description String
    dbType      DbType       @default(SQL)
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    user        User         @relation(fields: [userId], references: [id])
    userId      Int
    // Relations to actual model components
    entities    ModelEntity[]
    relations   Relation[]
}

model ModelEntity {
    id          Int       @id @default(autoincrement())
    name        String
    // For SQL these are tables, for NoSQL collections, for Graph nodes
    description String?
    dataModel   DataModel @relation(fields: [dataModelId], references: [id])
    dataModelId Int
    fields      Field[]
    // Track the relations this entity participates in
    fromRelations Relation[] @relation("FromEntity")
    toRelations   Relation[] @relation("ToEntity")
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Field {
    id          Int         @id @default(autoincrement())
    name        String
    fieldType   String    
    isRequired  Boolean   @default(false)
    defaultValue String?
    constraints Json?     // This is now supported in PostgreSQL
    entity      ModelEntity @relation(fields: [entityId], references: [id])
    entityId    Int
    fromRelations Relation[] @relation("FromField")
    toRelations Relation[] @relation("ToField")
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Relation {
    id          Int         @id @default(autoincrement())
    name        String
    relationType RelationType
    fromEntity  ModelEntity @relation("FromEntity", fields: [fromEntityId], references: [id])
    fromEntityId Int
    toEntity    ModelEntity @relation("ToEntity", fields: [toEntityId], references: [id])
    toEntityId  Int
    fromField   Field       @relation("FromField", fields: [fromFieldId], references: [id])
    fromFieldId Int
    toField     Field       @relation("ToField", fields: [toFieldId], references: [id])
    toFieldId   Int
    cardinality String    // e.g., "1:n", "n:n", etc.
    dataModel   DataModel  @relation(fields: [dataModelId], references: [id])
    dataModelId Int
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

enum DbType {
    SQL
    NOSQL
    GRAPH
}

enum RelationType {
    FOREIGN_KEY
    REFERENCE
    EDGE
}